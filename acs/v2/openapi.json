{
  "openapi": "3.0.0",
  "info": {
    "description": "API for managing splunk cloud stacks. (c) 2020 Splunk Inc. All rights reserved. I acknowledge that Splunk is not responsible for the installation or use of any application that is not a supported Splunk application and Splunk specifically disclaims the accuracy, integrity, quality, legality, usefulness or security of such application or its use. Installation and use of an application that is not a supported Splunk application is at your own risk. Please note that if data leaves Splunk Cloud as a result of installing or using such application, Splunkâ€™s security attestations do not apply to data outside Splunk Cloud. Learn more about installing private apps (link to https://docs.splunk.com/Documentation/SplunkCloud/8.2.2109/Config/ManageApps). Access and use is subject to the Splunk General Terms (https://www.splunk.com/en_us/legal/splunk-general-terms.html) and Splunk's Website Terms and Conditions (https://www.splunk.com/en_us/legal/terms/terms-of-use.html).",
    "title": "Splunk Cloud Admin API",
    "version": "v2"
  },
  "paths": {
    "/{stack}/adminconfig/v2/status": {
      "get": {
        "tags": [
          "system"
        ],
        "description": "describe the generic information about the stack",
        "operationId": "DescribeStack",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/StackStatus"
                    }
                  }
                }
              }
            },
            "description": "stack information: status, type, version"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/kv/status": {
      "get": {
        "tags": [
          "kvstatus"
        ],
        "description": "describe the generic information about kvstatus",
        "operationId": "GetKvStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/KvStatusResponse"
                    }
                  }
                }
              }
            },
            "description": "stack information: backupRestoreStatus, kvStoreDisabled, standalone, lastStatusReceived, members"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/access/outbound-ports": {
      "get": {
        "tags": [
          "outbound"
        ],
        "description": "describe the outboundports with ports and subnets",
        "operationId": "GetOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "outboundports": {
                      "description": "the subnets from where the stack feature can access to",
                      "items": {
                        "$ref": "#/components/schemas/OutboundResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of outbound ports"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "outbound"
        ],
        "description": "add subnets to the outboundports for the feature, if they don't already exist",
        "operationId": "AddOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "outboundPorts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subnets": {
                          "items": {
                            "description": "ipv4  subnet e.g. 21.45.63.00/32",
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "port": {
                          "type": "integer",
                          "format": "int32"
                        }
                      }
                    }
                  },
                  "reason": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the new subnets",
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully submitted request to add an outbound port",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/access/outbound-ports/{port}": {
      "get": {
        "tags": [
          "outbound"
        ],
        "description": "describe the outboundports with ports and subnets",
        "operationId": "DescribeOutboundports",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "the outbound port to be deleted",
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "outboundports": {
                      "description": "the subnets from where the stack feature can access to",
                      "items": {
                        "$ref": "#/components/schemas/OutboundResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of outbound ports"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "outbound"
        ],
        "description": "delete an existing outbound port if it exists, from where the feature is accessible from",
        "operationId": "DeleteOutboundport",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "description": "the outbound port to be deleted",
            "in": "path",
            "name": "port",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4  subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the subnets to delete outbound ports for",
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully submitted request to delete outbound port"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/access/{feature}/ipallowlists": {
      "delete": {
        "tags": [
          "allowlist"
        ],
        "description": "delete existing ip subnets (if they exists) from where the splunk cloud stack feature is accessible from",
        "operationId": "DeleteSubnets",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4 subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the subnets to be deleted",
          "required": true
        },
        "responses": {
          "200": {
            "description": "accepted request to delete the forwarder ipallowlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "allowlist"
        ],
        "description": "describe the allowlist with its status and subnets from where the feature is accessible from",
        "operationId": "DescribeAllowlist",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "subnets": {
                      "description": "the subnets from where the stack feature is accessible from",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of ip subnets"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "allowlist"
        ],
        "description": "add subnets to the allowlist for the feature, if they don't already exist",
        "operationId": "AddSubnets",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "subnets": {
                    "items": {
                      "description": "ipv4 subnet e.g. 21.45.63.00/32",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "the new subnets",
          "required": true
        },
        "responses": {
          "200": {
            "description": "accepted request to add a new forwarder ipallowlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/access/{feature}/ipallowlists/{subnet}": {
      "delete": {
        "tags": [
          "allowlist"
        ],
        "description": "delete an existing ip subnet if it exists, from where the feature is accessible from",
        "operationId": "DeleteSubnet",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/feature"
          },
          {
            "description": "the subnet to be deleted",
            "in": "path",
            "name": "subnet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "accepted request to delete the forwarder ipallowlist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarningResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/apps": {
      "get": {
        "tags": [
          "Apps"
        ],
        "description": "list apps available on the stacks",
        "operationId": "ListApps",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved apps",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "apps": {
                      "items": {
                        "$ref": "#/components/schemas/App"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Apps"
        ],
        "description": "install an app",
        "operationId": "InstallApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "name": "ACS-Legal-Ack",
            "in": "header",
            "description": "ACS-Legal-Ack is required for installing private apps",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "description": "the splunkbase authentication token",
                    "type": "string"
                  },
                  "package": {
                    "description": "the pre-approved app package file in tar.gz format",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "description": "the app package in tar.gz format",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully installed a new app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/apps/{app}": {
      "get": {
        "tags": [
          "Apps"
        ],
        "description": "get an app",
        "operationId": "DescribeApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved an app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Apps"
        ],
        "description": "uninstall the app",
        "operationId": "UninstallApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully submitted a request to delete the app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/apps/victoria": {
      "get": {
        "tags": [
          "AppsVictoria"
        ],
        "description": "list apps available on the stacks",
        "operationId": "ListAppsVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "splunkbase",
            "in": "query",
            "required": false,
            "description": "filter apps based on splunkbase and non-splunkbase apps",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved apps",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "apps": {
                      "items": {
                        "$ref": "#/components/schemas/App"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "AppsVictoria"
        ],
        "description": "install an app for Victoria stack",
        "operationId": "InstallAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "name": "splunkbase",
            "in": "query",
            "required": false,
            "description": "is the app available in splunkbase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "X-Splunkbase-Authorization",
            "in": "header",
            "description": "Splunkbase sessionID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Splunk-Authorization",
            "in": "header",
            "description": "The app inspect token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ACS-Legal-Ack",
            "in": "header",
            "description": "ACS-Legal-Ack is required for installing private apps",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ACS-Licensing-Ack",
            "in": "header",
            "description": "ACS-Licensing-Ack is required for installing splunkbase apps",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PrivateAppBody"
                  },
                  {
                    "$ref": "#/components/schemas/SplunkbaseBody"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully installed a new app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "202": {
            "description": "successfully submitted an install request of an app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/apps/victoria/{app}": {
      "patch": {
        "tags": [
          "AppsVictoria"
        ],
        "description": "update an installed splunkbase apps",
        "operationId": "PatchAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          },
          {
            "name": "X-Splunkbase-Authorization",
            "in": "header",
            "description": "The splunkbase sessionID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ACS-Licensing-Ack",
            "in": "header",
            "description": "ACS-Licensing-Ack is required for updating splunkbase apps",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchSplunkbaseBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully updated an installed app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "202": {
            "description": "successfully submitted an update to an installed app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "AppsVictoria"
        ],
        "description": "get an app",
        "operationId": "DescribeAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved an app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AppsVictoria"
        ],
        "description": "uninstall the app",
        "operationId": "UninstallAppVictoria",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/app-name"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully deleted the app"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/inputs/http-event-collectors": {
      "post": {
        "description": "Create hec token for the stack",
        "operationId": "CreateHEC",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HecSpec"
              }
            }
          },
          "description": "Hec Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http-event-collector": {
                      "$ref": "#/components/schemas/HecSpec"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully submitted a new hec token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "description": "List of all HEC objects",
        "operationId": "ListHECs",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http_event_collectors": {
                      "items": {
                        "$ref": "#/components/schemas/HecInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fetch all hec info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/inputs/http-event-collectors/{hec}": {
      "get": {
        "description": "Get detailed Info about a particular HEC",
        "operationId": "DescribeHec",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "http-event-collector": {
                      "$ref": "#/components/schemas/HecInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Hec Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Modify properties of HEC",
        "operationId": "UpdateHEC",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HecSpec"
              }
            }
          },
          "description": "Modify Hec object",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a hec token update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "delete HEC",
        "operationId": "DeleteHec",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/hec"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "description": "Name of the HEC Object to be deleted",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted hec token deletion"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "description": "create a token to authenticate against ACS",
        "operationId": "createToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenBody"
              }
            }
          },
          "description": "Token Post Body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokeninfo": {
                      "$ref": "#/components/schemas/TokenInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully added a new token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "get all tokens",
        "operationId": "listTokens",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/tokenStatus"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokens": {
                      "items": {
                        "$ref": "#/components/schemas/TokenInfo"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of tokens"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/tokens/{tokenID}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "description": "get token info",
        "operationId": "GetTokenInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/tokenID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tokeninfo": {
                      "$ref": "#/components/schemas/TokenInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successfully Get Token Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "description": "delete token on the stack",
        "operationId": "deleteToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/tokenID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted token"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/indexes": {
      "post": {
        "tags": [
          "Indexes"
        ],
        "description": "create index on the stack",
        "operationId": "createIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndexInfo"
              }
            }
          },
          "description": "Index Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInfo"
                }
              }
            },
            "description": "successfully submitted a new index"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Indexes"
        ],
        "description": "list all indexes available on the stack",
        "operationId": "listIndexes",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "indexes": {
                      "items": {
                        "$ref": "#/components/schemas/IndexResponse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "list of indexes"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/indexes/{index}": {
      "get": {
        "tags": [
          "Indexes"
        ],
        "description": "get index info on the stack",
        "operationId": "getIndexInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "indexinfo": {
                      "$ref": "#/components/schemas/IndexResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Index Object Info"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Indexes"
        ],
        "description": "Modify index info on the stack",
        "operationId": "patchIndexInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchIndexInfo"
              }
            }
          },
          "description": "Modify index object info",
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully submitted index update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Indexes"
        ],
        "description": "Delete index on the stack",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/index"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "description": "Name of the index object to be deleted",
          "required": true
        },
        "responses": {
          "202": {
            "description": "index deletion request submitted"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits": {
      "get": {
        "tags": [
          "Limits"
        ],
        "description": "get all limits configuration from the stack",
        "operationId": "getAllLimitsConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "description": "All Limits Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}": {
      "get": {
        "tags": [
          "Limits"
        ],
        "description": "get limit configuration from the stack",
        "operationId": "getLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "limitconfiguration": {
                      "$ref": "#/components/schemas/LimitConfigurationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Limit Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Limits"
        ],
        "description": "add limit configuration to the stack",
        "operationId": "AddLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitConfigurationInfo"
              }
            }
          },
          "description": "Limit Setting Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a limit configuration update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/{key}": {
      "get": {
        "tags": [
          "Limits"
        ],
        "description": "get limit configuration from the stack",
        "operationId": "getKeyLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          },
          {
            "$ref": "#/components/parameters/key"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "limitconfiguration": {
                      "$ref": "#/components/schemas/LimitConfigurationResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Limit Configuration"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/reset": {
      "post": {
        "tags": [
          "Limits"
        ],
        "description": "reset limit configuration on the stack",
        "operationId": "ResetLimitConfig",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitResetSettingsList"
              }
            }
          },
          "description": "Limit Setting Info",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a reset limit configuration update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits/defaults": {
      "get": {
        "tags": [
          "Limits"
        ],
        "description": "get default, minimum and maximum values for all limits configuration from the stack",
        "operationId": "GetAllLimitsConfigDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LimitStanza"
                  }
                }
              }
            },
            "description": "All Limits Configuration's default, mininimum, and maximum values"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/limits/{stanza}/defaults": {
      "get": {
        "tags": [
          "Limits"
        ],
        "description": "get default, minimum, and maximum values for limit configuration from the stack",
        "operationId": "GetLimitsConfigDefaults",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/stanza"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LimitStanza"
                }
              }
            },
            "description": "Limit Configuration's default, mininimum, and maximum values"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/permissions/federated-provider": {
      "put": {
        "tags": [
          "CloudResources",
          "Permissions",
          "FederatedProviders"
        ],
        "description": "add cloud resource permissions for a set of federated providers",
        "operationId": "UpdatePermissionsFederatedProvider",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionsFederatedProvider"
              }
            }
          },
          "description": "The Federated Providers that will have their permissions updated",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "successfully submitted a cloud resource permissions update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "CloudResources",
          "Permissions",
          "FederatedProviders"
        ],
        "description": "describe cloud resource permissions for a set of federated providers",
        "operationId": "DescribePermissionsFederatedProvider",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribePermissionsFederatedProvider"
                }
              }
            },
            "description": "successfully submitted a cloud resource permissions update"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/private-connectivity/eligibility": {
      "get": {
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "description": "describe the eligibility of stack for enabling private connectivity",
        "operationId": "ValidatePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeEligibilityPrivateConnectivity"
                }
              }
            },
            "description": "display eligibility of the stack for enabling private connectivity"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/private-connectivity/endpoints": {
      "get": {
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "description": "describes the status, customerAccountIds and endpoint name",
        "operationId": "DescribePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribePrivateConnectivity"
                }
              }
            },
            "description": "display status, customerAccountIds and endpoint name if private connectivity is enabled. if private connectivity is disabled status and reason are displayed"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "description": "enables private connectivity and adds provided customerAccountIds to the private network",
        "operationId": "EnablePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnablePrivateConnectivity"
              }
            }
          },
          "description": "Customer AccountIds",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnablePrivateConnectivity"
                }
              }
            },
            "description": "returns customerAccountIds that were added to the private network"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Private Connectivity",
          "Private Link"
        ],
        "description": "updates private connectivity and patches provided customerAccountIds to the private network",
        "operationId": "UpdatePrivateConnectivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnablePrivateConnectivity"
              }
            }
          },
          "description": "Customer AccountIds",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePrivateConnectivity"
                }
              }
            },
            "description": "returns customerAccountIds that were added to the private network"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/schedules": {
      "get": {
        "tags": [
          "MaintenanceWindows"
        ],
        "description": "list all scheduled maintenance windows schedules on the stack. Default time range is 30 days. If both fromTime and toTime is empty, default is +30 days from current time. If only toTime is given, default is -30 days from toTime",
        "operationId": "ListMaintenanceWindowsSchedules",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/count"
          },
          {
            "$ref": "#/components/parameters/nextLink"
          },
          {
            "$ref": "#/components/parameters/fromTime"
          },
          {
            "$ref": "#/components/parameters/toTime"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MaintenanceWindowsResponse"
                  }
                }
              }
            },
            "description": "successfully list all scheduled maintenance windows schedules"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/maintenance-windows/schedules/{scheduleID}": {
      "get": {
        "tags": [
          "MaintenanceWindows"
        ],
        "description": "Describe a specific maintenance window schedule",
        "operationId": "DescribeMaintenanceWindowsSchedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/scheduleID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MaintenanceWindowsSchedule"
                }
              }
            },
            "description": "successfully describe a specific maintenance window schedule"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/adminconfig/v2/splunkbase/{splunkbaseID}": {
      "get": {
        "tags": [
          "Splunkbase"
        ],
        "description": "describe splunkbase app",
        "operationId": "DescribeSplunkbaseApp",
        "parameters": [
          {
            "$ref": "#/components/parameters/splunkbaseID"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved splunkbase app info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplunkbaseApp"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/apps-browser/": {
      "get": {
        "tags": [
          "Apps",
          "AppsBrowser",
          "Splunkbase"
        ],
        "description": "browse apps on splunkbase",
        "operationId": "AppsBrowserGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully retrieved data from splunkbase",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SplunkbaseApp"
                  },
                  "type": "array"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false
      },
      "post": {
        "tags": [
          "Apps",
          "AppsBrowser",
          "Splunkbase"
        ],
        "description": "browse apps on splunkbase",
        "operationId": "AppsBrowserPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully submit data to splunkbase",
            "content": {
              "application/atom+xml": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "updated": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false
      }
    },
    "/{stack}/adminconfig/v2/enablement/{appGroup}/{featureName}": {
      "get": {
        "tags": [
          "Enablement"
        ],
        "description": "describe the enablement status of an app feature",
        "operationId": "DescribeAppFeatureEnablement",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/appGroup"
          },
          {
            "$ref": "#/components/parameters/featureName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFeatureEnablement"
                }
              }
            },
            "description": "describe the enablement status of an app feature"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Enablement"
        ],
        "description": "Enable or disable an app feature",
        "operationId": "SetAppFeatureEnablement",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/appGroup"
          },
          {
            "$ref": "#/components/parameters/featureName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppFeatureEnablement"
              }
            }
          },
          "description": "enablement",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppFeatureEnablement"
                }
              }
            },
            "description": "returns whether the app feature has been enabled or disabled"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/restart-now": {
      "post": {
        "tags": [
          "restart"
        ],
        "description": "Restart a search head on a non-cluster stack, or initiate a rolling restart on a search-head-cluster stack",
        "operationId": "RestartStack",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartResponse"
                }
              }
            },
            "description": "successfully submitted a restart request"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/restart/status": {
      "get": {
        "tags": [
          "restart"
        ],
        "description": "Get rolling restart status for a search-head-cluster stack",
        "operationId": "RestartStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "shcStatus": {
                      "items": {
                        "$ref": "#/components/schemas/RestartStatus"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "successfully retrieved restart status"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/kv/presigned/{kvOperation}/{filename}": {
      "get": {
        "tags": [
          "KV Backups"
        ],
        "description": "Get presigned URL to manage backups files in S3 bucket",
        "operationId": "GetKvPresignedUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/kvOperation"
          },
          {
            "$ref": "#/components/parameters/filename"
          }
        ],
        "responses": {
          "303": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KVPresignedResponse"
                }
              }
            },
            "description": "successfully generated a presigned URL"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets": {
      "get": {
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "description": "List all configured self storage locations on the stack",
        "operationId": "ListSelfStorageLocations",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "selfStorageLocations": {
                      "items": {
                        "$ref": "#/components/schemas/SelfStorageLocationInfo"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "selfStorageLocations"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "list of available self storage locations"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets/{bucketName}": {
      "get": {
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "description": "Describe a configured self storage location on the stack",
        "operationId": "DescribeSelfStorageLocation",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationInfo"
                }
              }
            },
            "description": "successfully describe a specific self storage location"
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/buckets/{bucketName}/policy": {
      "get": {
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "description": "Get the IAM policy to configure S3 bucket for self storage location",
        "operationId": "GetSelfStorageLocationPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          },
          {
            "$ref": "#/components/parameters/bucketName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationPolicy"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/{stack}/adminconfig/v2/cloud-resources/self-storage-locations/configs/prefix": {
      "get": {
        "tags": [
          "CloudResources",
          "DDSS"
        ],
        "description": "Get the bucket prefix required to configure self storage location(s)",
        "operationId": "GetSelfStorageLocationPrefix",
        "parameters": [
          {
            "$ref": "#/components/parameters/stack"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfStorageLocationPrefix"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/defaultError"
          }
        },
        "x-auth-required": false,
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "count": {
        "description": "the count of items to return",
        "in": "query",
        "name": "count",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 100,
          "default": 30
        }
      },
      "offset": {
        "description": "the offset to start return items from",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "default": 0
        }
      },
      "nextLink": {
        "description": "nextLink to the next segment of the result set. A nextLink with the value null indicates there are no more pages. UTC is the default timezone.",
        "in": "query",
        "name": "nextLink",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "fromTime": {
        "description": "the earliest time to return results from. Format is expected to be YYYY-MM-DD or in RFC3339. UTC is the default timezone.",
        "in": "query",
        "name": "fromTime",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "toTime": {
        "description": "the latest time to return results from. Format is expected to be YYYY-MM-DD or in RFC3339. UTC is the default timezone.",
        "in": "query",
        "name": "toTime",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "feature": {
        "description": "the feature the access rules apply towards",
        "in": "path",
        "name": "feature",
        "required": true,
        "schema": {
          "enum": [
            "s2s",
            "hec",
            "search-ui",
            "search-api",
            "idm-api",
            "idm-ui"
          ],
          "type": "string"
        }
      },
      "stack": {
        "description": "the stack name",
        "in": "path",
        "name": "stack",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "kvOperation": {
        "description": "operation to perform on a key in S3 bucket",
        "in": "path",
        "name": "kvOperation",
        "required": true,
        "schema": {
          "enum": [
            "download",
            "upload"
          ],
          "type": "string"
        }
      },
      "filename": {
        "description": "file in the S3 bucket",
        "in": "path",
        "name": "filename",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "app-name": {
        "description": "the app name",
        "in": "path",
        "name": "app",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "appGroup": {
        "description": "the app name",
        "in": "path",
        "name": "appGroup",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "featureName": {
        "description": "the feature name",
        "in": "path",
        "name": "featureName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "splunkbaseID": {
        "description": "the splunkbase app id",
        "in": "path",
        "name": "splunkbaseID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "hec": {
        "description": "hec name",
        "in": "path",
        "name": "hec",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tokenID": {
        "description": "token ID",
        "in": "path",
        "name": "tokenID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "scheduleID": {
        "description": "maintenance window schedule ID",
        "in": "path",
        "name": "scheduleID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "index": {
        "description": "index name",
        "in": "path",
        "name": "index",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "stanza": {
        "description": "stanza name",
        "in": "path",
        "name": "stanza",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "description": "key name",
        "in": "path",
        "name": "key",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tokenStatus": {
        "description": "status of tokens wanted",
        "in": "query",
        "name": "status",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "username": {
        "description": "user of tokens wanted",
        "in": "query",
        "name": "username",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "bucketName": {
        "description": "bucket for self storage location",
        "in": "path",
        "name": "bucketName",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "defaultError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "unexpected error"
      }
    },
    "schemas": {
      "Error": {
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "StackStatus": {
        "properties": {
          "infrastructure": {
            "properties": {
              "status": {
                "description": "the status of the infrastructure 1) Ready - The stack is ready, and infrastructure is up to date. 2) Pending - The stack has some pending changes that haven't been applied to the stack yet. The changes could be internal system changes for stacks or user requested changes like modification to allow lists. 3) Failed - There were some errors while applying changes to the stacks were being applied. The changes could be internal system changes for stacks or user requested changes like modification to allow lists. User should reach out to Splunk support for resolution.",
                "type": "string"
              },
              "stackType": {
                "description": "the type of the stack (Victoria/Classic)",
                "type": "string"
              },
              "stackVersion": {
                "description": "the version of the stack",
                "type": "string"
              }
            },
            "type": "object"
          },
          "messages": {
            "properties": {
              "restartRequired": {
                "description": "The stack has a notification to restart splunk server. User should restart stack via UI for all configurations to be completed. It may take some time for the correct state for restart-required field to be populated in a Search Head Cluster, given sync delays with different Search Heads",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "infrastructure",
          "messages"
        ]
      },
      "KvStatusResponse": {
        "properties": {
          "current": {
            "type": "string"
          },
          "members": {
            "type": "string"
          }
        }
      },
      "PrivateAppBody": {
        "description": "the app package in tgz format",
        "type": "string",
        "format": "binary"
      },
      "SplunkbaseBody": {
        "description": "the splunkbase app name and version to install. If no version specified, the latest version will be installed.",
        "type": "object",
        "properties": {
          "splunkbaseID": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "splunkbaseID"
        ]
      },
      "PatchSplunkbaseBody": {
        "description": "the splunkbase app version to update.  If no version specified, the latest version will be installed.",
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "App": {
        "description": "an splunk installed on the stack",
        "properties": {
          "appID": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "package": {
            "type": "string"
          },
          "splunkbaseID": {
            "type": "string"
          },
          "stateChangeRequiresRestart": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "SplunkbaseApp": {
        "description": "splunkbase app",
        "properties": {
          "appid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "licenseName": {
            "type": "string"
          },
          "licenseUrl": {
            "type": "string"
          }
        },
        "required": [
          "appid",
          "title",
          "licenseName",
          "licenseUrl"
        ]
      },
      "UpdatePermissionsFederatedProvider": {
        "properties": {
          "federatedProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FederatedProvider"
            }
          }
        }
      },
      "DescribePermissionsFederatedProvider": {
        "properties": {
          "status": {
            "type": "string"
          },
          "federatedProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FederatedProvider"
            }
          }
        }
      },
      "FederatedProvider": {
        "properties": {
          "cloudProvider": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "buckets": {
            "items": {
              "description": "bucket paths",
              "type": "string"
            },
            "type": "array"
          },
          "databases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Database"
            }
          },
          "keys": {
            "items": {
              "description": "managed keys",
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "Database": {
        "properties": {
          "database": {
            "type": "string"
          },
          "tables": {
            "items": {
              "description": "table names",
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "DescribeEligibilityPrivateConnectivity": {
        "properties": {
          "eligible": {
            "type": "boolean"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "DescribePrivateConnectivity": {
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "customerAccountIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "EnablePrivateConnectivity": {
        "properties": {
          "customerAccountIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdatePrivateConnectivity": {
        "properties": {
          "patchedCustomerAccountIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AppFeatureEnablement": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "HecSpec": {
        "properties": {
          "name": {
            "type": "string"
          },
          "defaultIndex": {
            "type": "string"
          },
          "defaultSource": {
            "type": "string"
          },
          "defaultHost": {
            "type": "string"
          },
          "defaultSourcetype": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "allowedIndexes": {
            "items": {
              "description": "allowed indices",
              "type": "string"
            },
            "type": "array"
          },
          "useAck": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "HecInfo": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "spec": {
            "$ref": "#/components/schemas/HecSpec"
          }
        }
      },
      "TokenInfo": {
        "properties": {
          "user": {
            "type": "string"
          },
          "audience": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "expiresOn": {
            "type": "string",
            "format": "date-time"
          },
          "notBefore": {
            "type": "string",
            "format": "date-time"
          },
          "lastUsed": {
            "type": "string",
            "format": "date-time"
          },
          "lastUsedIP": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "user",
          "audience",
          "id",
          "expiresOn",
          "notBefore",
          "status"
        ]
      },
      "TokenBody": {
        "properties": {
          "user": {
            "type": "string"
          },
          "audience": {
            "type": "string"
          },
          "expiresOn": {
            "type": "string",
            "default": "+30d"
          },
          "type": {
            "type": "string",
            "default": "static"
          }
        },
        "required": [
          "user",
          "audience"
        ]
      },
      "MaintenanceWindowsResponse": {
        "properties": {
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsSchedule"
            },
            "type": "array"
          },
          "nextLink": {
            "type": "string"
          }
        },
        "required": [
          "schedules",
          "nextLink"
        ]
      },
      "MaintenanceWindowsSchedule": {
        "properties": {
          "scheduleId": {
            "type": "string"
          },
          "scheduleStartTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "string",
            "description": "duration of maintenance windows in hours"
          },
          "requestedEntity": {
            "type": "string",
            "description": "requester of the maintenance, customer or splunk"
          },
          "requestedUser": {
            "type": "string",
            "description": "user who is requesting the maintenance"
          },
          "status": {
            "type": "string",
            "description": "maintenance window schedule status"
          },
          "lastSummary": {
            "type": "string",
            "description": "summary or reason for the maintenance"
          },
          "operations": {
            "items": {
              "$ref": "#/components/schemas/MaintenanceWindowsOperation"
            },
            "type": "array"
          }
        },
        "required": [
          "duration",
          "scheduleStartTimestamp",
          "status",
          "requestedEntity",
          "scheduleId",
          "lastModifiedTimestamp"
        ]
      },
      "MaintenanceWindowsOperation": {
        "properties": {
          "SFDCTickets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "appName": {
            "type": "string",
            "description": "app name that needs to be upgraded"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "time at which the operation started"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "time at which the operation ended"
          },
          "notes": {
            "description": "notes for splunk customer",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "operationDescription": {
            "type": "string",
            "description": "description of the operation"
          },
          "operationStatus": {
            "type": "string",
            "description": "maintenance window schedule operation status"
          },
          "operationType": {
            "type": "string"
          },
          "targetVersion": {
            "type": "string",
            "description": "target version after upgrade"
          }
        },
        "required": [
          "operationStatus",
          "operationDescription",
          "operationType"
        ]
      },
      "IndexInfo": {
        "properties": {
          "name": {
            "type": "string"
          },
          "datatype": {
            "type": "string",
            "default": "event"
          },
          "searchableDays": {
            "type": "integer",
            "format": "int64",
            "default": 90
          },
          "maxDataSizeMB": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "splunkArchivalRetentionDays": {
            "type": "integer",
            "format": "int64"
          },
          "selfStorageBucketPath": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "LimitConfigurationInfo": {
        "properties": {
          "settings": {
            "type": "object",
            "format": "map[string]interface{}"
          }
        }
      },
      "LimitResetSettingsList": {
        "properties": {
          "settings": {
            "type": "array",
            "format": "[]interface{}"
          }
        }
      },
      "LimitConfigurationResponse": {
        "properties": {
          "settings": {
            "properties": {
              "setting": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "array"
          }
        }
      },
      "LimitStanza": {
        "properties": {
          "stanza": {
            "type": "string"
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LimitSetting"
            }
          }
        }
      },
      "LimitSetting": {
        "properties": {
          "setting": {
            "type": "string"
          },
          "minValue": {
            "type": "number",
            "format": "double"
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "defaultValue": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PatchIndexInfo": {
        "properties": {
          "searchableDays": {
            "type": "integer",
            "format": "int64"
          },
          "maxDataSizeMB": {
            "type": "integer",
            "format": "int64"
          },
          "splunkArchivalRetentionDays": {
            "type": "integer",
            "format": "int64"
          },
          "selfStorageBucketPath": {
            "type": "string"
          }
        }
      },
      "IndexResponse": {
        "properties": {
          "name": {
            "type": "string"
          },
          "datatype": {
            "type": "string",
            "default": "event"
          },
          "searchableDays": {
            "type": "integer",
            "format": "uint64",
            "default": 90
          },
          "maxDataSizeMB": {
            "type": "integer",
            "format": "uint64",
            "default": 0
          },
          "totalEventCount": {
            "type": "string"
          },
          "totalRawSizeMB": {
            "type": "string"
          },
          "splunkArchivalRetentionDays": {
            "type": "integer",
            "format": "uint64"
          },
          "selfStorageBucketPath": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "datatype",
          "searchableDays",
          "maxDataSizeMB"
        ]
      },
      "OutboundResponse": {
        "properties": {
          "name": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "destinationRanges": {
            "items": {
              "description": "destination ranges",
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "WarningResponse": {
        "properties": {
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RestartResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "RestartStatus": {
        "properties": {
          "captain": {
            "type": "string"
          },
          "rollingRestartInitiated": {
            "type": "boolean"
          },
          "serviceReady": {
            "type": "boolean"
          }
        }
      },
      "KVPresignedResponse": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "SelfStorageLocationInfo": {
        "properties": {
          "title": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "folder": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "name",
          "path",
          "folder",
          "description"
        ]
      },
      "SelfStorageLocationPrefix": {
        "properties": {
          "prefix": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "message"
        ]
      },
      "SelfStorageLocationPolicy": {
        "properties": {
          "policy": {
            "type": "object"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "policy",
          "message"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      },
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  }
}